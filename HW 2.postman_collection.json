{
	"info": {
		"_postman_id": "e37f14a1-6972-4fe8-ab8b-f91ed1f276f7",
		"name": "HW 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26168795"
	},
	"item": [
		{
			"name": "/ first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"pm.expect(pm.response.text()).to.include(\"This is the first responce from server!ss\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var resp_name=jsonData.name;\r",
							"var req = request.data;\r",
							"var req_name = req.name;\r",
							"\r",
							"console.log(\"resp_name =\"+ resp_name)\r",
							"console.log(\"req_name =\"+ req_name)\r",
							"\r",
							"var resp_age=jsonData.age;\r",
							"var req_age = req.age;\r",
							"\r",
							"console.log(\"resp_age =\"+ resp_age)\r",
							"console.log(\"req_age =\"+ req_age)\r",
							"\r",
							"var resp_salary = jsonData.salary;\r",
							"var req_salary = +req.salary;\r",
							"\r",
							"console.log(\"resp_salary =\"+ resp_salary)\r",
							"console.log(\"req_salary =\"+ req_salary)\r",
							"\r",
							"pm.test(\"req_resp_Family_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var resp_family=jsonData.family;\r",
							"console.log(\"resp_family =\"+ resp_family)\r",
							"\r",
							"var resp_json = pm.response.json();\r",
							"// Достаем значение u_salary_1_5_year из family response json\r",
							"var resp_salary_1_5_year = resp_json.family.u_salary_1_5_year;\r",
							"console.log(\"resp_salary_1_5_year =\"+ resp_salary_1_5_year)\r",
							"\r",
							"// Сравниваем req_salary*4 и resp_salary_1_5_year\r",
							"pm.test(\"Request_resp_SALARY_check\", function () {\r",
							"    pm.expect(req_salary * 4).to.eql(resp_salary_1_5_year);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "29",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Angelina",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"var resp_Json = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from req = name from resp\", function () {\r",
							"pm.expect(resp_Json.name).to.eql(req.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"age from req = age from resp\", function () {\r",
							"pm.expect(resp_Json.age).to.eql(req.age);\r",
							"});\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"salary from req = salary from resp\", function () {\r",
							"pm.expect(+resp_Json.salary).to.eql(+req.salary);\r",
							"});\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"console.log(resp_Json.family)\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"name is Luky\", function () {\r",
							"    pm.expect(resp_Json.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog age\", function () {\r",
							"pm.expect(resp_Json.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"name is Luky\", function () {\r",
							"    pm.expect(resp_Json.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Dog age 4\", function () {\r",
							"    pm.expect(resp_Json.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=ANgelina&age=29&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "ANgelina"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Отправить запрос.\r",
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json.\r",
							"    var resp_Json = pm.response.json();\r",
							"//4. Спарсить request.\r",
							"var req = pm.request.url.query.toObject();\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name from req = name from resp\", function () {\r",
							"    pm.expect(+resp_Json.name).to.eql(+req.name);\r",
							"});\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"check Age from req = age from resp\", function () {\r",
							"    pm.expect(+resp_Json.age).to.eql(+req.age);\r",
							"});\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log (req.salary)\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"console.log (resp_Json.salary)\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log (resp_Json.salary[0])\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log (resp_Json.salary[1])\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log (resp_Json.salary[2])\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check 0 salary element = salary from req\", function () {\r",
							"    pm.expect(+resp_Json.salary[0]).to.eql(+req.salary);\r",
							"});\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"check 1 salary element = salary*2 from req\", function () {\r",
							"    pm.expect(+resp_Json.salary[1]).to.eql(+req.salary*2);\r",
							"});\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"check 2 salary element = salary*3 from req\", function () {\r",
							"    pm.expect(+resp_Json.salary[2]).to.eql(+req.salary*3);\r",
							"});\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Angelina\");\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", 29);\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", 500);\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"for (var i in resp_Json.salary) {\r",
							"console.log(i)\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Angelina&age=29&salary=500",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Angelina"
						},
						{
							"key": "age",
							"value": "29"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Вставить параметр salary из окружения в request\r",
							"//2. Вставить параметр age из окружения в age\r",
							"//3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//6. Спарсить response body в json.\r",
							"    var resp_body_json = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"    var req_body = request.data;\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"check json resp have start_qa_salary \", function () {\r",
							"    pm.expect(resp_body_json).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"check json resp have qa_salary_after_6_months \", function () {\r",
							"    pm.expect(resp_body_json).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"check json resp have qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_body_json).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"check json resp have qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp_body_json).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"check json resp have qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_body_json).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"check json resp have person param\", function () {\r",
							"pm.expect(resp_body_json).to.have.property(\"person\");\r",
							"}); \r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check start_qa_salary = salary in request\", function () {\r",
							"    pm.expect(resp_body_json.start_qa_salary).to.eql(+req_body.salary);\r",
							"});\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"check qa_salary_after_6_months = salary*2 in request\", function () {\r",
							"    pm.expect(resp_body_json.qa_salary_after_6_months).to.eql(+req_body.salary*2);\r",
							"});\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"check qa_salary_after_12_months = salary*2.7 in request\", function () {\r",
							"    pm.expect(resp_body_json.qa_salary_after_12_months).to.eql(+req_body.salary*2.7);\r",
							"});\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"var resp_qa_salary_after_1_5_year = resp_body_json[\"qa_salary_after_1.5_year\"]\r",
							"\r",
							"pm.test(\"Req_resp_QA_SALARY_AFTER_1.5_YEAR_check\", function () {\r",
							" pm.expect(resp_qa_salary_after_1_5_year).to.eql(+req_body.salary * 3.3);\r",
							"});\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"var resp_qa_salary_after_3_5_years = resp_body_json[\"qa_salary_after_3.5_years\"]\r",
							"\r",
							"pm.test(\"Req_resp_QA_SALARY_AFTER_3.5_years_check\", function () {\r",
							" pm.expect(resp_qa_salary_after_3_5_years).to.eql(+req_body.salary * 3.8);\r",
							"});\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Req_resp_person 1element u_name=salary check\", function () {\r",
							" pm.expect(resp_body_json.person.u_name[1]).to.eql(+req_body.salary);\r",
							"});\r",
							"//20. Проверить, что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Req_resp u_age=age check\", function () {\r",
							" pm.expect(resp_body_json.person.u_age).to.eql(+req_body.age);\r",
							"});\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Req_resp u_salary_5_years=salary*4.2 check\", function () {\r",
							" pm.expect(resp_body_json.person.u_salary_5_years).to.eql(+req_body.salary*4.2);\r",
							"});\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (var i in resp_body_json.person) {\r",
							"console.log(i)\r",
							"};"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}